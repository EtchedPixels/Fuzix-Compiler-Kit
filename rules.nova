	jmp 1,1
	.word %1
%1:
=
%1:

	mov 3,1
	psha 1
;
=
	psha 3
;

	mov 3,1
	sta 1,@__sp,0
;
=
	sta 3,@__sp,0
;

#	Bool/jtrue or bool/jfalse and not
	mov 1,1,szr
	subzl 1,1
;
	jsr @__jt,0
=
	jsr @__booljt

	mov 1,1,szr
	subzl 1,1
;
	jsr @__jf,0
=
	jsr @__booljf

	mov 1,1,snr
	subzl 1,1,skp
	sub 1,1
;
	jsr @__jt,0
=
	jsr @__notjt

	mov 1,1,snr
	subzl 1,1,skp
	sub 1,1
;
	jsr @__jf,0
=
	jsr @__notjf

#	Our byte read currently masks so for uchar we can remove the cast
#	that normally follows
	jsr @__derefc,0
	lda 0,__N255,0
	and 0,1
=
	jsr @__derefc,0

# Optimize pushes
	jsr @__const1,0
	.word %1
	psha 1
=
	jsr @__cpush,0
	.word %1

	jsr @__iconst1,0
	.word %1
	psha 1
=
	jsr @__cipush,0
	.word %1

	jsr @__const1l,0
	.word %1
	.word %2
	lda 0,__hireg,0
	psha 0
	psha 1
=
	jsr @__cpushl,0
	.word %1
	.word %2

	jsr @__iconst1l,0
	.word %1
	psha 1
=
	jsr @__cipushl,0
	.word %1

# Optimize pushes
	jsr @__const1,0
	.word %1
	sta 1,@__sp,0
=
	jsr @__cpush,0
	.word %1

	jsr @__iconst1,0
	.word %1
	sta 1,@__sp,0
=
	jsr @__cipush,0
	.word %1

	jsr @__const1l,0
	.word %1
	.word %2
	lda 0,__hireg,0
	sta 0,@__sp,0
	sta 1,@__sp,0
=
	jsr @__cpushl,0
	.word %1
	.word %2

	jsr @__iconst1l,0
	.word %1
	sta 1,@__sp,0
=
	jsr @__cipushl,0
	.word %1

# Optimize hireg a bit (should do tracking in compiler backend)
	sta 0,__hireg,0
	lda 0,__hireg,0
=
	sta 0,__hireg,0


# Ditto for locals (globals we need compiler to do because volatile
	sta %1,%2,3
	lda %1,%2,3
=
	sta %1,%2,3

# Clean up cases the compiler didn't manage to avoid push/pops
# (need two forms of the rule according to Nova type)

	lda 1,%1
	psha 1
;
	lda 1,%2
	popa 0
=
	lda 0,%1
	lda 1,%2

	lda 1,%1
	sta 1,@__sp,0
;
	lda 1,%2
	dsz __sp,0
	lda 0,@__sp,0
	dsz __sp,0
=
	lda 0,%1
	lda 1,%2

#	Store and reload (need to make the target backend do these)
#	FIXME
	sta %1,%2
	lda %1,%2
=
	sta %1,%2

